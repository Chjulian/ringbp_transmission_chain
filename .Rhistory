#' @param rel.susceptibility.c relative susceptibility of children to adults
#' @param disp.iso dispersion parameter for negative binomial distribution for isolated cases
#' @param disp.com dispersion parameter for negative binomial distribution for non-isolated cases
#' @param delay_shape shape of distribution for delay between symptom onset and isolation
#' @param delay_scale scale of distribution for delay between symptom onset and isolation
#'
#' @importFrom purrr safely
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' res <- scenario_sim(n.sim = 5,
#' num.initial.cases = 5,
#' cap_max_days = 365,
#' cap_cases = 2000,
#' r0isolated = 0,
#' r0community = 2.5,
#' disp.iso = 1,
#' disp.com = 0.16,
#' k = 0.7,
#' delay_shape = 2.5,
#' delay_scale = 5,
#' prop.asym = 0,
#' prop.ascertain = 0)
#' #' }
#'
scenario_sim <- function(n.sim = NULL, prop.ascertain = NULL, cap_max_days = NULL, cap_cases = NULL,
r0isolated = NULL, r0community = NULL,
rel.infectiousness.c = NULL, rel.susceptibility.c = NULL,
disp.iso = NULL, disp.com = NULL, k = NULL, initial.case.adult = NULL,
delay_shape = NULL, delay_scale = NULL, num.initial.cases = NULL, prop.asym = NULL,
quarantine = NULL) {
# Run n.sim number of model runs and put them all together in a big data.frame
res <- purrr::map(.x = 1:n.sim, ~ outbreak_model(num.initial.cases = num.initial.cases,
prop.ascertain = prop.ascertain,
cap_max_days = cap_max_days,
cap_cases = cap_cases,
r0isolated = r0isolated,
r0community = r0community,
rel.infectiousness.c = rel.infectiousness.c,
rel.susceptibility.c = rel.susceptibility.c,
initial.case.adult = initial.case.adult,
disp.iso = disp.iso,
disp.com = disp.com,
delay_shape = delay_shape,
delay_scale = delay_scale,
k = k,
prop.asym = prop.asym,
quarantine = quarantine))
# res <- purrr::map(.x = 1:n.sim, ~ outbreak_model(num.initial.cases = num.initial.cases,
#                                            prop.ascertain = prop.ascertain,
#                                            cap_max_days = cap_max_days,
#                                            cap_cases = cap_cases,
#                                            r0isolated = r0isolated,
#                                            r0community = r0community,
#                                            disp.iso = disp.iso,
#                                            disp.com = disp.com,
#                                            delay_shape = delay_shape,
#                                            delay_scale = delay_scale,
#                                            k = k,
#                                            prop.asym = prop.asym,
#                                            quarantine = quarantine))
# # bind output together and add simulation index
res <- data.table::rbindlist(res)
# res[, sim := rep(1:n.sim, rep(floor(cap_max_days / 7) + 1, n.sim)), ]
return(res)
}
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 4500, cap_max_days = 350,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 4500, cap_max_days = 350,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)
#' Run a specified number of simulations with identical parameters
#' @author Joel Hellewell / Katie Atkins
#' @param n.sim number of simulations to run
#' @param num.initial.cases Initial number of cases in each initial cluster
#' @param num.initial.clusters Number of initial clusters
#' @param initial.case.adult TRUE for adult, FALSE for child
#' @param prop.ascertain Probability that cases are ascertained by contact tracing
#' @param cap_max_days Maximum number of days to run process for
#' @param cap_cases Maximum number of cases to run process for
#' @param r0isolated basic reproduction number for isolated cases
#' @param r0community basic reproduction number for non-isolated cases
#' @param rel.infectiousness.c relative infectiousness of children to adults
#' @param rel.susceptibility.c relative susceptibility of children to adults
#' @param disp.iso dispersion parameter for negative binomial distribution for isolated cases
#' @param disp.com dispersion parameter for negative binomial distribution for non-isolated cases
#' @param delay_shape shape of distribution for delay between symptom onset and isolation
#' @param delay_scale scale of distribution for delay between symptom onset and isolation
#'
#' @importFrom purrr safely
#' @return
#' @export
#'
#' @examples
#' \dontrun{
#' res <- scenario_sim(n.sim = 5,
#' num.initial.cases = 5,
#' cap_max_days = 365,
#' cap_cases = 2000,
#' r0isolated = 0,
#' r0community = 2.5,
#' disp.iso = 1,
#' disp.com = 0.16,
#' k = 0.7,
#' delay_shape = 2.5,
#' delay_scale = 5,
#' prop.asym = 0,
#' prop.ascertain = 0)
#' #' }
#'
scenario_sim <- function(n.sim = NULL, prop.ascertain = NULL, cap_max_days = NULL, cap_cases = NULL,
r0isolated = NULL, r0community = NULL,
rel.infectiousness.c = NULL, rel.susceptibility.c = NULL,
disp.iso = NULL, disp.com = NULL, k = NULL, initial.case.adult = NULL,
delay_shape = NULL, delay_scale = NULL, num.initial.cases = NULL, prop.asym = NULL,
quarantine = NULL) {
# Run n.sim number of model runs and put them all together in a big data.frame
res <- purrr::map(.x = 1:n.sim, ~ outbreak_model(num.initial.cases = num.initial.cases,
prop.ascertain = prop.ascertain,
cap_max_days = cap_max_days,
cap_cases = cap_cases,
r0isolated = r0isolated,
r0community = r0community,
rel.infectiousness.c = rel.infectiousness.c,
rel.susceptibility.c = rel.susceptibility.c,
initial.case.adult = initial.case.adult,
disp.iso = disp.iso,
disp.com = disp.com,
delay_shape = delay_shape,
delay_scale = delay_scale,
k = k,
prop.asym = prop.asym,
quarantine = quarantine))
# res <- purrr::map(.x = 1:n.sim, ~ outbreak_model(num.initial.cases = num.initial.cases,
#                                            prop.ascertain = prop.ascertain,
#                                            cap_max_days = cap_max_days,
#                                            cap_cases = cap_cases,
#                                            r0isolated = r0isolated,
#                                            r0community = r0community,
#                                            disp.iso = disp.iso,
#                                            disp.com = disp.com,
#                                            delay_shape = delay_shape,
#                                            delay_scale = delay_scale,
#                                            k = k,
#                                            prop.asym = prop.asym,
#                                            quarantine = quarantine))
# # bind output together and add simulation index
res <- data.table::rbindlist(res, idcol = "sim.number")
# res[, sim := rep(1:n.sim, rep(floor(cap_max_days / 7) + 1, n.sim)), ]
return(res)
}
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 4500, cap_max_days = 350,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)
hist(res$sim.number)
sum(res$sim.number)
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 100, cap_max_days = 30,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 100, cap_max_days = 30,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 100, cap_max_days = 30,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)
#' Run a single instance of the branching process model
#' @author Joel Hellewell
#' @inheritParams outbreak_step
#' @param delay_shape numeric shape parameter of delay distribution
#' @param delay_scale numeric scale parameter of delay distribution
#' @param rel.infectiousness.c relative infectiousness of children to adults
#' @param rel.susceptibility.c relative susceptibility of children to adults
#'
#' @return data.table of cases by week, cumulative cases, and the effective reproduction number of the outreak
#' @export
#'
#' @importFrom data.table rbindlist
#'
#' @examples
#'
#'\dontrun{
#' incfn <- dist_setup(dist_shape = 2.322737,dist_scale = 6.492272)
#' # delay distribution sampling function
#' delayfn <- dist_setup(2, 4)
#' # generate initial cases
#' case_data <- outbreak_setup(num.initial.cases = 5,
#'                             incfn=incfn,
#'                             delayfn = delayfn,
#'                             k=1.95,
#'                             prop.asym=0)
#' # generate next generation of cases
#' case_data <- outbreak_step(case_data = case_data,
#'                            disp.iso = 1,
#'                            disp.com = 0.16,
#'                            r0isolated = 0,
#'                            r0community = 2.5,
#'                            prop.asym = 0,
#'                            incfn = incfn,
#'                            delayfn = delayfn,
#'                            prop.ascertain = 0,
#'                            k = 1.95,
#'                            quarantine = FALSE)
#'}
outbreak_model <- function(num.initial.cases = NULL, initial.case.adult = NULL, prop.ascertain = NULL,
cap_max_days = NULL, cap_cases = NULL,
r0isolated = NULL, r0community = NULL,
rel.infectiousness.c = NULL, rel.susceptibility.c = NULL,
disp.iso = NULL, disp.com = NULL,
k = NULL, delay_shape = NULL,
delay_scale = NULL, prop.asym = NULL,
quarantine = NULL) {
# Set up functions to sample from distributions
# incubation period sampling function
incfn <- dist_setup(dist_shape = 2.322737,
dist_scale = 6.492272)
# incfn <- dist_setup(dist_shape = 3.303525,dist_scale = 6.68849) # incubation function for ECDC run
# onset to isolation delay sampling function
delayfn <- dist_setup(delay_shape,
delay_scale)
#Set parameter values for age group Rs
r0params <- parameter_setup(rel.infectiousness.c = rel.infectiousness.c,
rel.susceptibility.c = rel.susceptibility.c,
r0community = r0community)
# Set initial values for loop indices
total.cases <- num.initial.cases
latest.onset <- 0
extinct <- FALSE
# Initial setup
case_data <- outbreak_setup(num.initial.cases = num.initial.cases,
initial.case.adult = initial.case.adult,
incfn = incfn,
prop.asym = prop.asym,
delayfn = delayfn,
k = k)
# Preallocate
effective_r0_vect <- c()
cases_in_gen_vect <- c()
# Model loop
while (latest.onset < cap_max_days & total.cases < cap_cases & !extinct) {
out <- outbreak_step(case_data = case_data,
disp.iso = disp.iso,
disp.com = disp.com,
r0isolated = r0isolated,
r0community = r0community,
r0community_aa = r0params$r0community_aa,
r0community_cc = r0params$r0community_cc,
r0community_ac = r0params$r0community_ac,
r0community_ca = r0params$r0community_ca,
incfn = incfn,
delayfn = delayfn,
prop.ascertain = prop.ascertain,
k = k,
quarantine = quarantine,
prop.asym = prop.asym)
case_data <- out[[1]]
effective_r0_vect <- c(effective_r0_vect, out[[2]])
cases_in_gen_vect <- c(cases_in_gen_vect, out[[3]])
total.cases <- nrow(case_data)
latest.onset <- max(case_data$onset)
extinct <- all(case_data$isolated)
}
# Prepare output, group into weeks
weekly_cases <- case_data[, week := floor(onset / 7)
][, .(weekly_cases = .N), by = week
]
# maximum outbreak week
max_week <- floor(cap_max_days / 7)
# weeks with 0 cases in 0:max_week
missing_weeks <- (0:max_week)[!(0:max_week %in% weekly_cases$week)]
# add in missing weeks if any are missing
if (length(missing_weeks > 0)) {
weekly_cases <- data.table::rbindlist(list(weekly_cases,
data.table(week = missing_weeks,
weekly_cases = 0)))
}
# order and sum up
weekly_cases <- weekly_cases[order(week)
][, cumulative := cumsum(weekly_cases)]
# cut at max_week
weekly_cases <- weekly_cases[week <= max_week]
# Add effective R0
weekly_cases <- weekly_cases[, `:=`(effective_r0 = mean(effective_r0_vect,
na.rm = TRUE),
cases_per_gen = list(cases_in_gen_vect))]
# return
# return(weekly_cases)
return(case_data)
}
a <- list(myvar = 1, myvar2 = myvar)
a <- data.table(myvar = 1, myvar2 = myvar)
a <- data.table(myvar = 1, myvar2 = 3)
a
a[, myvar2 = 4]
a[, myvar2 := 4]
a
a[, myvar3 := 4]
a
res <- scenario_sim(n.sim = 2, num.initial.cases = 1,prop.asym=0,
prop.ascertain = 0, cap_cases = 100, cap_max_days = 30,
r0isolated = 0, r0community = 2.5, rel.infectiousness.c = 1, rel.susceptibility.c = 1, disp.com = 0.16, disp.iso = 1, delay_shape = 1.651524,
delay_scale = 4.287786,k = 0, quarantine = FALSE, initial.case.adult = TRUE)dist_setup <- function(dist_shape = NULL, dist_scale = NULL) {
out <- purrr::partial(rweibull,
shape = dist_shape,
scale = dist_scale)
return(out)
}
dist_setup <- function(dist_shape = NULL, dist_scale = NULL) {
out <- purrr::partial(rweibull,
shape = dist_shape,
scale = dist_scale)
return(out)
}
incfn <- dist_setup(dist_shape = 2.322737,
dist_scale = 6.492272)
incfn
# relative contact rates of children(0-20y) and adults (21+y) using POLYMOD (no physical distancing)
rel.contactrate.cc <- 1.0000000
#' Create partial function to sample from gamma distributions
#' @author Joel Hellewell
#' @param dist_shape numeric shape parameter of Weibull distribution
#' @param dist_scale numeric scale parameter of Weibull distribution
#'
#' @return partial function that takes a numeric argument for number of samples
#' @export
#' @importFrom purrr partial
#' @examples
#'
dist_setup <- function(dist_shape = NULL, dist_scale = NULL) {
out <- purrr::partial(rweibull,
shape = dist_shape,
scale = dist_scale)
return(out)
}
#' Samples the serial interval for given incubation period samples
#'
#' @param inc_samp vector of samples from the incubation period distribution
#' @param k numeric skew parameter for sampling the serial interval from the incubation period
#'
#' @return
#' @export
#' @importFrom sn rsn
#' @examples
#'
inf_fn <- function(inc_samp = NULL, k = NULL) {
out <- sn::rsn(n = length(inc_samp),
xi = inc_samp,
omega = 2,
alpha = k)
out <- ifelse(out < 1, 1, out)
return(out)
}
adult_fn <- function(inc = NULL, R.adult = NULL, R.child = NULL, disp.com = NULL) {
# calculate the prob of inc offspring from both adult and child distributions
p_a <- dnbinom(x = inc,
size = disp.com,
mu = R.adult)
p_c <- dnbinom(x = inc,
size = disp.com,
mu = R.child)
# assigns T/F to whether each of the offspring are adults
out <- purrr::rbernoulli(n = inc,
p = p_a/(p_a+p_c))
return(out)
}
parameter_setup <- function(rel.infectiousness.c = NULL, rel.susceptibility.c = NULL, r0community = NULL){
# relative contact rates of children(0-20y) and adults (21+y) using POLYMOD (no physical distancing)
rel.contactrate.cc <- 1.0000000
rel.contactrate.ca <- 0.7938829
rel.contactrate.ac <- 0.2584824
rel.contactrate.aa <- 1.0542519
unscaled_ngm <- matrix(
c(rel.infectiousness.c * rel.susceptibility.c * rel.contactrate.cc,
rel.infectiousness.c * rel.contactrate.ca,
rel.susceptibility.c * rel.contactrate.ac,
rel.contactrate.aa),
nrow = 2, byrow = TRUE)
dom.eval <- max(eigen(unscaled_ngm)$values)
scaling.const <- r0community / dom.eval
ngm <- unscaled_ngm * scaling.const
out <- list(r0community_cc = ngm[1,1],
r0community_ca = ngm[1,2],
r0community_ac = ngm[2,1],
r0community_aa = ngm[2,2])
return(out)
}
#' Calculate proportion of runs that have controlled outbreak
#'
#' @author Joel Hellewell
#' @return
#' @export
#' @inheritParams detect_extinct
#' @examples
#'
extinct_prob <- function(outbreak_df_week  = NULL, cap_cases  = NULL) {
n_sim <- max(outbreak_df_week$sim)
out <- outbreak_df_week %>%
# new variable extinct = 1 if cases in weeks 10-12 all 0, 0 if not
detect_extinct(cap_cases) %>%
# number of runs where extinct = TRUE / number of runs
.$extinct %>%
sum(.) / n_sim
return(out)
}
#' Calculate proportion of outbreaks that went extinct
#' @author Joel Hellewell
#' @param outbreak_df_week data.table  weekly cases producted by the outbreak model
#' @param cap_cases integer number of cumulative cases at which the branching process was terminated
#'
#' @return
#' @export
#' @importFrom dplyr group_by filter summarise ungroup
#' @examples
#'
detect_extinct <- function(outbreak_df_week  = NULL, cap_cases  = NULL) {
outbreak_df_week %>%
dplyr::group_by(sim) %>% # group by simulation run
dplyr::filter(week %in% 12:16) %>%
dplyr::summarise(extinct =
ifelse(all(weekly_cases == 0 &
cumulative < cap_cases),
1, 0)) %>%
dplyr::ungroup()
}
#' Create sub-plot for supplementary figures
#'
#' @param theta.in character filtering value for theta
#' @param delay.in character filtering value for delay
#' @param prop.asym.in numeric filtering value for proportion of asymptomatic cases
#' @param num.initial.cases.in integer filtering value for number of initial cases
#' @param index_R0.in numeric filtering value for community R0 value
#' @param res.in data.table of results from parameter sweep
#'
#' @return
#' @export
#' @importFrom dplyr filter mutate
#' @importFrom ggplot2 ggplot aes geom_line geom_point facet_wrap ylab xlab scale_x_continuous scale_y_continuous coord_cartesian
#' @importFrom cowplot panel_border
#'
#' @examples
#'
sub_plot <- function(theta.in = "15%",
delay.in = "SARS",
prop.asym.in = 0,
num.initial.cases.in = 20,
index_R0.in = 2.5,
res.in = NULL,
facet.by = NULL,
col.by = NULL) {
col.by <- ggplot2::ensym(col.by)
res.in %>%
dplyr::filter(theta %in% theta.in,
delay %in% delay.in,
prop.asym %in% prop.asym.in,
num.initial.cases %in% num.initial.cases.in,
index_R0 %in% index_R0.in) %>%
# Ugly factor re-naming
dplyr::mutate(num.initial.cases = factor(num.initial.cases,
levels = c(5, 20, 40),
labels = c("5 cases",
"20 cases",
"40 cases"))) %>%
dplyr::mutate(delay = factor(delay,
levels = c("SARS", "Wuhan"),
labels = c("Short isolation delay",
"Long isolation delay"))) %>%
dplyr::mutate(prop.asym = factor(prop.asym,
levels = c(0, 0.1),
labels = c("No asymptomatic cases ",
"10% cases asmyptomatic"))) %>%
dplyr::mutate(theta = factor(theta,
levels = c("<1%", "15%", "30%"),
labels = c("<1% trans. pre-onset",
"15% trans. pre-onset",
"30% trans. pre-onset"))) %>%
# Put plot together
ggplot2::ggplot(ggplot2::aes(x = control_effectiveness,
y = pext,
color = as.factor(!!col.by))) +
ggplot2::geom_line(size = 0.75) +
ggplot2::geom_point(shape = 21,
col = "black",
ggplot2::aes(fill = as.factor(!!col.by)), size = 3) +
ggplot2::facet_wrap(as.formula(paste(". ~", facet.by))) +
ggplot2::ylab("Simulated outbreaks controlled (%)") +
ggplot2::xlab("Contacts traced (%)") +
ggplot2::scale_x_continuous(breaks = seq(0, 1, 0.2),
labels = seq(0, 100, 20)) +
ggplot2::scale_y_continuous(breaks = seq(0, 1, 0.2),
labels = seq(0, 100, 20)) +
cowplot::panel_border() +
ggplot2::coord_cartesian(ylim = c(0, 1))
}
a <- rweibull(100, 1,1)
hist(a)
min(a)
a <- rweibull(100, 1,2)
hist(a)
a <- rweibull(100, 2,1)
hist(a)
a <- rweibull(100, 3,1)
hist(a)
b <- c(TRUE, FALSE, TRUE)
sum(b)
